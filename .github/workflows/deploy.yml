name: Deploy to Fly.io

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_ci:
        description: "Skip CI checks (use existing artifacts)"
        required: false
        default: false
        type: boolean

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

permissions:
  contents: read
  actions: read

jobs:
  # CI pipeline for deployment builds
  ci-for-deploy:
    name: CI for Deployment
    runs-on: ubuntu-22.04
    if: ${{ !inputs.skip_ci }}
    outputs:
      artifact-name: ${{ steps.artifact-info.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set artifact name
        id: artifact-info
        run: |
          ARTIFACT_NAME="gatherly-release-$(date +%Y%m%d)-${{ github.sha }}"
          echo "name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Run Dependencies Check
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: deps --source=. sync

      - name: Run Code Quality Checks
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: quality --source=.

      - name: Run Security Checks
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: security --source=.

      - name: Run Tests with Database
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: test --source=.

      - name: Build Production Release
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: build --source=. sync

      - name: Export Build Artifacts
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: artifacts --source=. export --path=./artifacts/gatherly-release

      - name: Upload build artifacts for deployment
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-info.outputs.name }}
          path: ./artifacts/gatherly-release/
          retention-days: 7

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-22.04
    needs: [ci-for-deploy]
    if: always() && (needs.ci-for-deploy.result == 'success' || inputs.skip_ci)
    environment:
      name: production
      url: https://gatherly.fly.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        if: ${{ !inputs.skip_ci }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci-for-deploy.outputs.artifact-name }}
          path: ./release-artifacts/

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          flyctl deploy --app gatherly --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run post-deployment health checks
        run: |
          echo "üîç Running production health checks..."

          # Wait for deployment to be ready
          sleep 45

          # Check main application health
          if curl -f --max-time 30 https://gatherly.fly.dev/; then
            echo "‚úÖ Main domain health check passed"
          else
            echo "‚ùå Main domain health check failed"
            exit 1
          fi

          # Check custom domain if configured
          if curl -f --max-time 30 https://gatherly.qingbo.us/; then
            echo "‚úÖ Custom domain health check passed"
          else
            echo "‚ö†Ô∏è Custom domain health check failed (may be DNS propagation)"
          fi

      - name: Notify production deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "üì± App URL: https://gatherly.fly.dev"
          echo "üåê Custom domain: https://gatherly.qingbo.us"
          echo "‚ú® Deployment completed at $(date)"

  # Quality gate for critical deployments
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run critical quality checks
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          verb: call
          args: quality --source=.

      - name: Quality gate passed
        run: |
          echo "‚úÖ All critical quality checks passed!"
          echo "üöÄ Ready for production deployment"

  # Rollback capability (manual trigger only)
  rollback:
    name: Rollback Production Deployment
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Rollback deployment
        run: |
          APP_NAME="gatherly"

          echo "üîÑ Rolling back $APP_NAME to previous version..."
          flyctl releases list --app $APP_NAME

          # Get the second-to-last release and rollback
          PREVIOUS_VERSION=$(flyctl releases list --app $APP_NAME --json | jq -r '.[1].version')

          if [ "$PREVIOUS_VERSION" != "null" ] && [ -n "$PREVIOUS_VERSION" ]; then
            flyctl rollback --app $APP_NAME $PREVIOUS_VERSION
            echo "‚úÖ Rollback to version $PREVIOUS_VERSION completed"
          else
            echo "‚ùå No previous version found for rollback"
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
