name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  MIX_ENV: test
  DOCKER_BUILDKIT: 1

jobs:
  format:
    name: 🎨 Format Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-format-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-format-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Check code formatting
        run: just format-check

  compile:
    name: 🔧 Compile Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-compile-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-compile-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Compile with warnings as errors
        run: just compile-strict

  lint:
    name: 🔍 Lint Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lint-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lint-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Run Credo linting
        run: just lint

  dialyzer:
    name: ⚡ Type Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-dialyzer-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-dialyzer-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Run Dialyzer type checking
        run: just dialyzer

  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-security-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-security-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Run security audit
        run: just security

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-test-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-test-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Run tests with coverage
        run: just test-coverage

  vulnerability-scan:
    name: 🕵️ Dependency Scan
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-vuln-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-vuln-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Check for unused dependencies
        run: just deps-audit

  assets:
    name: 🎨 Assets Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-assets-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-assets-

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment health check
        run: just doctor

      - name: Build and test assets
        run: just assets-check

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-22.04
    needs: [format, compile, lint, dialyzer, security, test, vulnerability-scan, assets]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Validate secrets
        run: |
          if [ -z "$FLY_API_TOKEN" ]; then
            echo "❌ FLY_API_TOKEN is not set"
            exit 1
          fi
          echo "✅ Required secrets are present"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: just deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Check health endpoint
          if curl -f -s https://gatherly.qingbo.us/health > /dev/null; then
            echo "✅ Deployment health check passed"
          else
            echo "❌ Deployment health check failed"
            exit 1
          fi