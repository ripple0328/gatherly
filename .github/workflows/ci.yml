name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MIX_ENV: test
  ELIXIR_VERSION: 1.18.4
  OTP_VERSION: 28.0.1
  POSTGRES_VERSION: 17.5
  NODE_VERSION: 20

jobs:
  # Security and dependency checks
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-security-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-security-
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get --only prod
    
    - name: Check for retired packages
      run: mix hex.audit
    
    - name: Check for outdated packages
      run: mix hex.outdated
      continue-on-error: true
    
    - name: Verify dependencies
      run: mix deps.get --check-locked

  # Code quality and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-lint-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-lint-
          ${{ runner.os }}-mix-
    
    - name: Cache PLT files
      uses: actions/cache@v4
      with:
        path: priv/plts
        key: ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors
    
    - name: Check formatting
      run: mix format --check-formatted
    
    - name: Run Credo
      run: mix credo --strict
    
    - name: Setup PLT cache
      run: mix dialyzer --plt
    
    - name: Run Dialyzer
      run: mix dialyzer --format github

  # Build and test assets
  assets:
    name: Assets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-assets-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-assets-
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Setup assets
      run: mix assets.setup
    
    - name: Build assets (dev)
      run: mix assets.build
    
    - name: Build assets (production)
      run: mix assets.deploy
    
    - name: Verify assets exist
      run: |
        ls -la priv/static/
        test -f priv/static/assets/app.css
        test -f priv/static/assets/app.js

  # Comprehensive testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gatherly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-test-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-test-
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Compile code
      run: mix compile --warnings-as-errors
    
    - name: Setup assets
      run: mix assets.setup
    
    - name: Build assets
      run: mix assets.build
    
    - name: Create test database
      run: mix ecto.create
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gatherly_test
    
    - name: Run database migrations
      run: mix ecto.migrate
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gatherly_test
    
    - name: Run tests with coverage
      run: mix test --cover --export-coverage default
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gatherly_test
    
    - name: Generate coverage report
      run: mix test.coverage
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./cover/excoveralls.json
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # Integration tests (if applicable)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security, lint, assets]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gatherly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-integration-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-integration-
          ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Setup database
      run: mix ecto.setup
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gatherly_test
    
    - name: Start Phoenix server (background)
      run: |
        mix phx.server &
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gatherly_test
        PORT: 4001
    
    - name: Health check
      run: |
        curl -f http://localhost:4001/ || exit 1
        curl -f http://localhost:4001/health || echo "Health endpoint not available"

  # Deploy to Fly.io
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [security, lint, assets, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Verify Fly.io configuration
      run: flyctl config validate
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Deploy to Fly.io
      run: flyctl deploy --remote-only --wait-timeout 300
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Health check after deployment
      run: |
        sleep 30
        flyctl status
        APP_URL=$(flyctl info --json | jq -r '.Hostname')
        curl -f "https://${APP_URL}/" || exit 1
        echo "✅ Deployment successful and healthy"
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      continue-on-error: true

  # Notification job (runs after deploy, regardless of success/failure)
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment to Fly.io was successful"
        else
          echo "❌ Deployment to Fly.io failed"
          exit 1
        fi